{"mappings":"uDAAAA,EAAiBC,KAAKC,MAAM,oSCE5B,MAAMC,EAAYC,SAASC,cAAc,cACzC,IAAIC,EAAgB,CAClBC,MAAOJ,EAAUK,YACjBC,OAAQN,EAAUO,cAsBpB,SAASC,EAAmBC,EAAQC,GAClC,MAAMC,EAAeF,EAClBG,QACAC,MAAK,CAACC,EAAGC,IAAMA,EAAEX,MAAQW,EAAET,OAASQ,EAAEV,MAAQU,EAAER,SAC7CU,EAAmB,GACzB,IAAIC,EAAa,EACbC,EAAc,EAElB,SAASC,EAAUf,GACjBa,GAAcb,C,CAOhB,SAASgB,EAAiBC,GAJ1B,IAAqBf,IAKPe,EAAMf,OAJlBY,GAAeZ,EAKfW,EAAa,EACbE,EAAU,E,CAGZR,EAAaW,SAAQD,IACnB,GACEX,EAAcN,MAAQa,EAAaI,EAAMjB,OACzCM,EAAcN,QAAUa,EAAaI,EAAMjB,MAG3CgB,EAAiBT,EAAa,SAEzB,GAAID,EAAcN,MAAQa,EAAa,EAAG,CAC/BP,EAAcN,K,EAMlC,SAA0BiB,GACxBL,EAAiBO,KAAK,CACpBC,KAAMP,EACNQ,OAAQP,EACRQ,aAAcL,EAAMM,I,CARtBC,CAAiBP,GACjBF,EAAUE,EAAMjB,MAAM,IAqBxB,MAAO,C,SARL,EACAa,EAAcC,GACXD,EAAaC,EACZP,EAAakB,QACX,CAACC,EAAKT,IAAUS,EAAMT,EAAMjB,MAAQiB,EAAMf,QAC1C,I,iBAGWU,E,CAGrB,SAASe,EAASC,GAChBhC,EAAUiC,UAAY,GAEtBD,EAAOhB,iBAAiBM,SAAQD,IAC9B,MAAMa,EAAejC,SAASkC,cAAc,OAC5CD,EAAaE,UAAY,QACzBF,EAAaD,UAAYZ,EAAMK,aAC/BQ,EAAaG,MAAMjC,MAAQkC,EAAAzC,GAAUwB,EAAMK,cAActB,MAAQ,KACjE8B,EAAaG,MAAM/B,OAASgC,EAAAzC,GAAUwB,EAAMK,cAAcpB,OAAS,KACnE4B,EAAaG,MAAME,gBAcd,IAAIC,KAAKC,MAAsB,SAAhBD,KAAKE,UACxBC,SAAS,IACTC,SAAS,EAAG,OAfbV,EAAaG,MAAMZ,OAASJ,EAAMI,OAAS,KAC3CS,EAAaG,MAAMb,KAAOH,EAAMG,KAAO,KAEvCxB,EAAU6C,YAAYX,EAAa,IAGrC,MAAMY,EAAkB7C,SAASkC,cAAc,OAC/CW,EAAgBV,UAAY,WAC5BU,EAAgBb,UAAY,aAAaD,EAAOe,SAASC,QAAQ,KACjEhD,EAAU6C,YAAYC,E,CA5FxBf,EAJevB,EACb8B,EAAAzC,GAAUoD,KAAI,CAAC5B,EAAOM,KAAQ,IAAKN,E,GAAOM,MAC1CxB,IAIF+C,OAAOC,iBAAiB,UAAU,KAChChD,EAAgB,CACdC,MAAOJ,EAAUK,YACjBC,OAAQN,EAAUO,cAOpBwB,EAJkBvB,EAChB8B,EAAAzC,GAAUoD,KAAI,CAAC5B,EAAOM,KAAQ,IAAKN,E,GAAOM,MAC1CxB,GAEiB","sources":["src/blocks.json","src/js/blocks.js"],"sourcesContent":["[\n  { \"width\": 90, \"height\": 90 },\n  { \"width\": 60, \"height\": 115 },\n  { \"width\": 120, \"height\": 80 },\n  { \"width\": 40, \"height\": 60 },\n  { \"width\": 300, \"height\": 300 },\n  { \"width\": 100, \"height\": 200 },\n  { \"width\": 50, \"height\": 100 },\n  { \"width\": 200, \"height\": 20 },\n  { \"width\": 60, \"height\": 100 },\n  { \"width\": 80, \"height\": 100 },\n  { \"width\": 400, \"height\": 200 }\n]\n","import blockData from '../blocks.json';\n\nconst container = document.querySelector('.container');\nlet containerSize = {\n  width: container.clientWidth,\n  height: container.clientHeight,\n};\n\nconst result = efficientPlacement(\n  blockData.map((block, id) => ({ ...block, id })),\n  containerSize\n);\nrenderUI(result);\n\nwindow.addEventListener('resize', () => {\n  containerSize = {\n    width: container.clientWidth,\n    height: container.clientHeight,\n  };\n\n  const newResult = efficientPlacement(\n    blockData.map((block, id) => ({ ...block, id })),\n    containerSize\n  );\n  renderUI(newResult);\n});\n\nfunction efficientPlacement(blocks, containerSize) {\n  const sortedBlocks = blocks\n    .slice()\n    .sort((a, b) => b.width * b.height - a.width * a.height);\n  const blockCoordinates = [];\n  let totalWidth = 0;\n  let totalHeight = 0;\n\n  function countLeft(width) {\n    totalWidth += width;\n  }\n\n  function countHeight(height) {\n    totalHeight += height;\n  }\n\n  function countWindowWidth(block) {\n    countHeight(block.height);\n    totalWidth = 0;\n    countLeft(0);\n  }\n\n  sortedBlocks.forEach(block => {\n    if (\n      containerSize.width < totalWidth + block.width ||\n      containerSize.width === totalWidth + block.width\n    ) {\n      // if (blockCoordinates.left === 0) {\n      countWindowWidth(sortedBlocks[0]);\n      // }\n    } else if (containerSize.width - totalWidth > 0) {\n      let freeSpace = containerSize.width - totalWidth;\n    }\n    createCoordinate(block);\n    countLeft(block.width);\n  });\n\n  function createCoordinate(block) {\n    blockCoordinates.push({\n      left: totalWidth,\n      bottom: totalHeight,\n      initialOrder: block.id,\n    });\n  }\n\n  // console.log(blockCoordinates);\n  const fullness =\n    1 -\n    (totalWidth * totalHeight) /\n      (totalWidth * totalHeight +\n        sortedBlocks.reduce(\n          (acc, block) => acc + block.width * block.height,\n          0\n        ));\n\n  return { fullness, blockCoordinates };\n}\n\nfunction renderUI(result) {\n  container.innerHTML = '';\n\n  result.blockCoordinates.forEach(block => {\n    const blockElement = document.createElement('div');\n    blockElement.className = 'block';\n    blockElement.innerHTML = block.initialOrder;\n    blockElement.style.width = blockData[block.initialOrder].width + 'px';\n    blockElement.style.height = blockData[block.initialOrder].height + 'px';\n    blockElement.style.backgroundColor = getRandomHexColor();\n    blockElement.style.bottom = block.bottom + 'px';\n    blockElement.style.left = block.left + 'px';\n\n    container.appendChild(blockElement);\n  });\n\n  const fullnessElement = document.createElement('div');\n  fullnessElement.className = 'fullness';\n  fullnessElement.innerHTML = `Fullness: ${result.fullness.toFixed(2)}`;\n  container.appendChild(fullnessElement);\n}\n\nfunction getRandomHexColor() {\n  return `#${Math.floor(Math.random() * 16777215)\n    .toString(16)\n    .padStart(6, '0')}`;\n}\n"],"names":["$ad27ad589cdad272$exports","JSON","parse","$3b9c15e4e0f53f65$var$container","document","querySelector","$3b9c15e4e0f53f65$var$containerSize","width","clientWidth","height","clientHeight","$3b9c15e4e0f53f65$var$efficientPlacement","blocks","containerSize1","sortedBlocks","slice","sort","a","b","blockCoordinates","totalWidth","totalHeight","countLeft","countWindowWidth","block","forEach","push","left","bottom","initialOrder","id","createCoordinate","reduce","acc","$3b9c15e4e0f53f65$var$renderUI","result1","innerHTML","blockElement","createElement","className","style","$parcel$interopDefault","backgroundColor","Math","floor","random","toString","padStart","appendChild","fullnessElement","fullness","toFixed","map","window","addEventListener"],"version":3,"file":"index.7f4525f3.js.map"}